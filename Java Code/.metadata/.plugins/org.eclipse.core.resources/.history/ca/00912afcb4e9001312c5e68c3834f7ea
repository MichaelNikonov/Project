package server.database;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;

import sgi.entities.*;


public final class Database {

	private Connection _conn;
	
	/*
	 * A list of all the prepared statements to use with the database
	 */
	private PreparedStatement 
		// Permissions
		_getPermissions, _getPermission,
		// Users
		_getUser, _getUsers, _setUserOnLine, _removeUserOnLine, 
		_getUnusedLoggedUsers, _removeUnusedLoggedUsers,
		// Clients
		_getClientById, _getClientByUsername, _getClientByName, _getClients,
		// Employees
		_getEmployeeById, _getEmployeeByUsername, _getEmployeeByPosition, 
		_getEmployees, _getEmployeeType, _getEmployeeTypes,
		// Locations
		_getLocations, _getLocationById,
		// Images
		_getImage, _getImages,_searchImages, _addImage, _deleteImage,
		// Layers
		_getLayers, _getLayer, _getLayerType, _getLayerTypes, _getImageLayers,
		_getLayersByType,
		// Prices
		_getPriceType, _getPriceTypes,
		// Subscription
		_getSubscriptionType, _getSubscriptionTypes, _getClientSubscriptions,
		_getSubscriptions, _getSubscription,
		// Complaints
		_getComplaints, _getUnseenComplaints, _getUnrepliedComplaints,
		_getNearDeadlineComplaints, _getComplaintType, _getComplaintTypes,
		// Purchases And History
		_getPurchases, _getPurchasesByMonth, _getClientPurchases,
		_getClientSearchHistory;
	
	public Database(String sqlHost, String sqlDatabase, String sqlUser, 
			String sqlPassword) {
		try {
			// Register driver
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			// Create main connection object
			_conn = DriverManager.getConnection(
					"jdbc:mysql://" + sqlHost + "/" + sqlDatabase,
					sqlUser, sqlPassword);
			
			// Create prepared statements
			
			// Permissions, Types...
			_getPermissions = _conn.prepareStatement(
					"SELECT * FROM permissions");
			_getPermission = _conn.prepareStatement(
					"SELECT * FROM permissions " + 
					"WHERE id = ?");
			
			// User
			_getUser = _conn.prepareStatement(
					"SELECT * FROM users " +
					"WHERE username = ? AND password = ?");
			_getUsers = _conn.prepareStatement(
					"SELECT * FROM users");
			_setUserOnLine = _conn.prepareStatement(
					"INSERT INTO online_users " +
					"(username, timedate, ip) " +
					"VALUES " +
					"(?,NOW(),?)");
			_removeUserOnLine = _conn.prepareStatement(
					"DELETE FROM online_users " +
					"WHERE username = ?");
			_getUnusedLoggedUsers = _conn.prepareStatement(
					"SELECT * FROM online_users " +
					"WHERE TIMESTAMPDIFF(MINUTE,timedate,NOW()) > ?");
			_removeUnusedLoggedUsers = _conn.prepareStatement(
					"DELETE FROM online_users " +
					"WHERE TIMESTAMPDIFF(MINUTE,timedate,NOW()) > ?");
			
			// Client
			_getClients = _conn.prepareStatement(
					"SELECT * FROM clients");
			_getClientById = _conn.prepareStatement(
					"SELECT * FROM clients " +
					"WHERE id = ?");
			_getClientByUsername = _conn.prepareStatement(
					"SELECT * FROM clients " +
					"WHERE username = ?");
			_getClientByName = _conn.prepareStatement(
					"SELECT * FROM clients " +
					"WHERE first_name = ? OR last_name = ?");
			
			// Employee
			_getEmployees = _conn.prepareStatement(
					"SELECT * FROM employees");
			_getEmployeeById = _conn.prepareStatement(
					"SELECT * FROM employees " +
					"WHERE employees.id = ?");
			_getEmployeeByUsername = _conn.prepareStatement(
					"SELECT * FROM employees " +
					"WHERE employees.username = ?");
			_getEmployeeByPosition = _conn.prepareStatement(
					"SELECT * FROM employees " +
					"WHERE employee_type.name = ?");
			_getEmployeeTypes = _conn.prepareStatement(
					"SELECT * FROM employee_type");
			_getEmployeeType = _conn.prepareStatement(
					"SELECT * FROM employee_type " +
					"WHERE id = ?");
			
			// Locations
			_getLocations = _conn.prepareStatement(
					"SELECT * FROM locations");
			_getLocationById = _conn.prepareStatement(
					"SELECT * FROM locations " + 
					"WHERE id = ?");
			
			// Images
			_getImage = _conn.prepareStatement(
					"SELECT * FROM images " +
					"WHERE id = ?");
			_getImages = _conn.prepareStatement(
					"SELECT * FROM images");
			_searchImages = _conn.prepareStatement(
					"SELECT * FROM images " +
					"WHERE locations.name = ? OR timedate = ?");
			_addImage = _conn.prepareStatement(
					"INSERT INTO images " +
					"(id, location, timedate) " +
					"VALUES (NULL, ?, ?)");
			_deleteImage = _conn.prepareStatement(
					"DELETE FROM images " +
					"WHERE id = ?");
			// Layers
			_getLayerTypes = _conn.prepareStatement(
					"SELECT * FROM layer_type");
			_getLayerType = _conn.prepareStatement(
					"SELECT * FROM layer_type " +
					"WHERE id = ?");
			_getLayers = _conn.prepareStatement(
					"SELECT * FROM layers");
			_getLayersByType = _conn.prepareStatement(
					"SELECT * FROM layers " +
					"WHERE l_type = ?");
			_getLayer = _conn.prepareStatement(
					"SELECT * FROM layers " +
					"WHERE id = ?");
			_getImageLayers = _conn.prepareStatement(
					"SELECT * FROM layers " +
					"WHERE image_id = ?");
			
			// Complaints
			_getComplaints = _conn.prepareStatement(
					"SELECT * FROM complaints");
			_getUnseenComplaints = _conn.prepareStatement(
					"SELECT * FROM complaints " +
					"WHERE employee_id = NULL");
			_getUnrepliedComplaints = _conn.prepareStatement(
					"SELECT * FROM complaints " +
					"WHERE reply IS NULL OR reply = \'\'");
			_getComplaintTypes = _conn.prepareStatement(
					"SELECT * FROM complaint_type");
			_getComplaintType = _conn.prepareStatement(
					"SELECT * FROM complaint_type " +
					"WHERE id = ?");
			_getNearDeadlineComplaints = _conn.prepareStatement(
					"SELECT * FROM complaints " +
					"WHERE (reply IS NULL OR reply = \'\') AND ((?*24*60) - TIMESTAMPDIFF(MINUTE,send_timedate,NOW()) < ?)");
			
			// Price
			_getPriceType = _conn.prepareStatement(
					"SELECT * FROM price_type " +
					"WHERE id = ?");
			_getPriceTypes = _conn.prepareStatement(
					"SELECT * FROM price_type");

			// Subscriptions
			_getSubscriptionType = _conn.prepareStatement(
					"SELECT * FROM subscription_type " +
					"WHERE id = ?");
			_getSubscriptionTypes = _conn.prepareStatement(
					"SELECT * FROM subscription_type");
			_getClientSubscriptions = _conn.prepareStatement(
					"SELECT * FROM subscription_purchases " +
					"WHERE client_id = ?");
			_getSubscriptions = _conn.prepareStatement(
					"SELECT * FROM subscriptions");
			_getSubscription = _conn.prepareStatement(
					"SELECT * FROM subscriptions" +
					"WHERE id = ?");
			
			// Purchases And History
			_getPurchases = _conn.prepareStatement(
					"SELECT * FROM purchases");
			_getClientPurchases = _conn.prepareStatement(
					"SELECT * FROM purchases " +
					"WHERE client_id = ?");
			_getPurchasesByMonth = _conn.prepareStatement(
					"SELECT * FROM purchases " +
					"WHERE MONTH(timedate) = ?");
		
		} catch (SQLException | InstantiationException | IllegalAccessException 
				| ClassNotFoundException e) {
			_conn = null;
			System.out.println("Datebase CONSTRUCTOR: " + e.getMessage());
			// handle error
		}
	}
	
	/**
	 * Gets a result set and returns the number of records in the result set
	 * @param rs
	 * @return Number of records in the result set
	 */
	private int getResultSetCount(ResultSet rs) {
		if (rs==null) return 0;
		int rowCount = 0;
		try {
			if (rs.last()) {
				rowCount = rs.getRow();
			  rs.beforeFirst(); 
			}
			return rowCount;
		} catch (SQLException e) {
			System.out.println("getResultSetCount: " + e.getMessage());
			return 0;
		}
		
	}
	
	/**
	 * Get a string that represent a DateTime value from MySql and returns
	 * a Java Date object
	 * @param sqlvalue
	 * @return Java Date object
	 */
	private Date sqlDateTimeToJavaDate(String sqlvalue) {
		try {
			String res = sqlvalue.replace("-", "/");
			res = res.substring(0, res.length()-3);
			return new Date(res);
		} catch (Exception e) {
			return null;
		}
	}
	
	/**
	 * Get a Java Date object and return a string value representing
	 * that Date object in MySql DateTime format
	 * @param jvalue
	 * @return MySql DateTime string
	 */
	public String javaDateToSqlDateTime(Date jvalue) {
		String temp = jvalue.toString();
		String year = temp.substring(24,28);
		String time = temp.substring(11,19);
		String day = temp.substring(8,10);
		String month = "01";
		if (temp.substring(4,7).equals("Jan")) month = "01";
		if (temp.substring(4,7).equals("Feb")) month = "02";
		if (temp.substring(4,7).equals("Mar")) month = "03";
		if (temp.substring(4,7).equals("Apr")) month = "04";
		if (temp.substring(4,7).equals("May")) month = "05";
		if (temp.substring(4,7).equals("Jun")) month = "06";
		if (temp.substring(4,7).equals("Jul")) month = "07";
		if (temp.substring(4,7).equals("Aug")) month = "08";
		if (temp.substring(4,7).equals("Sep")) month = "09";
		if (temp.substring(4,7).equals("Oct")) month = "10";
		if (temp.substring(4,7).equals("Nov")) month = "11";
		if (temp.substring(4,7).equals("Dec")) month = "12";
		return (year + "-" + month + "-" + day + " " + time); 
	}

	// Permissions
	/**
	 * Get all the available permissions in the system
	 * @return An ArrayList of the permissions
	 */
	public ArrayList<Permission> getPermissions() {
		try {
			ArrayList<Permission> res = null;
			ResultSet rs = null;
			rs = _getPermissions.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Permission>();
				while (rs.next()) {
					res.add(new Permission(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}		
	}
	
	/**
	 * Get a permission with s specific id
	 * @param id
	 * @return The permission with that id, or null of none exists
	 */
	public Permission getPermission(int id) {
		try {
			Permission res = null;
			ResultSet rs = null;
			_getPermission.setInt(1, id);
			rs = _getPermission.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Permission(rs.getInt(1), rs.getString(2));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}		
	}
	
	// Users
	public ArrayList<User> getUsers() {
		try {
			ArrayList<User> res = null;
			ResultSet rs = null;
			rs = _getUsers.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<User>();
				while (rs.next()) {
					res.add(
							new User(rs.getString(1), rs.getString(2), 
									new Permission(rs.getInt(3), 
											rs.getString(5))));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public User getUser(String username, String password) {
		try {
			User res = null;
			ResultSet rs = null;
			_getUser.setString(1, username);
			_getUser.setString(2, password);
			rs = _getUser.executeQuery();
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new User(rs.getString(1), rs.getString(2), 
									new Permission(rs.getInt(3), 
											rs.getString(5)));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}
	
	public int setUserOnline(User u, String ip) {
		try {
			_setUserOnLine.setString(1, u.getUsername());
			_setUserOnLine.setString(2, ip);
			if (_setUserOnLine.executeUpdate()==1)
				return 1;
			else
				return 0;
		} catch (SQLException e) {
			// Error code 1062 - duplicate key, means user is already online
			if (e.getErrorCode()==1062)
				return 2;
			else
				return 0;
		}
	}
	
	public boolean setUserOffline(User u) {
		try {
			_removeUserOnLine.setString(1, u.getUsername());
			if (_removeUserOnLine.executeUpdate()==1)
				return true;
			else
				return false;
		} catch (SQLException e) {
			return false;
		}		
	}

	/**
	 * Removes ("log off") all the logged in users that where not active for
	 * a specific amount of time (interval in minutes)
	 * @param interval
	 * @return true if any records removed
	 */
	public boolean removeUnusedLoggedUsers(int interval) {
		try {
			_removeUnusedLoggedUsers.setInt(1, interval);
			if (_removeUnusedLoggedUsers.executeUpdate()==1)
				return true;
			else
				return false;
		} catch (SQLException e) {
			return false;
		}		
	}
	
	/**
	 * Get a list of all the logged in users that where not active for
	 * a specific amount of time (interval in minutes)
	 * @param interval
	 * @return ArrayList of users
	 */
	public ArrayList<User> getUnusedLoggedUsers(int interval) {
		try {
			ArrayList<User> res = null;
			ResultSet rs = null;
			_getUnusedLoggedUsers.setInt(1, interval);
			rs = _getUnusedLoggedUsers.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<User>();
				while (rs.next()) {
					res.add(
							new User(rs.getString(1), "", null));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}
	
	// Clients
	public Client getClient(String username) {
		try {
			Client res = null;
			ResultSet rs = null;
			_getClientByUsername.setString(1, username);
			rs = _getClientByUsername.executeQuery();
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Client(rs.getInt(1), rs.getString(2), rs.getString(3), 
						rs.getString(4), rs.getString(5), rs.getString(6));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}		
	}

	public Client getClient(int id) {
		try {
			Client res = null;
			ResultSet rs = null;
			_getClientById.setInt(1, id);
			rs = _getClientById.executeQuery();
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Client(rs.getInt("id"), rs.getString("first_name"), rs.getString("last_name"), 
						rs.getString("phone"), rs.getString("email"), rs.getString("username"));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("getClient: " + e.getMessage());
			return null;
		}		
	}

	public ArrayList<Client> getClients(String firstName, String lastName) {
		try {
			ArrayList<Client> res = null;
			ResultSet rs = null;
			_getClientByName.setString(1, firstName);
			_getClientByName.setString(2, lastName);
			rs = _getClientByName.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Client>();
				while (rs.next()) {
					res.add(
						new Client(rs.getInt(1), rs.getString(2), rs.getString(3), 
							rs.getString(4), rs.getString(5), rs.getString(6)));				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<Client> getClients() {
		try {
			ArrayList<Client> res = null;
			ResultSet rs = null;
			rs = _getClients.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Client>();
				while (rs.next()) {
					res.add(
						new Client(rs.getInt(1), rs.getString(2), rs.getString(3), 
							rs.getString(4), rs.getString(5), rs.getString(6)));				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	// Employees
	public Employee getEmployee(int id) {
		try {
			Employee res = null;
			ResultSet rs = null;
			_getEmployeeById.setInt(1, id);
			rs = _getEmployeeById.executeQuery();
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Employee(rs.getInt("id"), rs.getString("first_name"), rs.getString("last_name"), 
						rs.getString("phone"), rs.getString("email"), rs.getString("e_number"),
						getEmployeeType(rs.getInt("e_type")), rs.getString("username"));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("getEmployee: " + e.getMessage());
			return null;
		}		
	}

	public Employee getEmployee(String username) {
		try {
			Employee res = null;
			ResultSet rs = null;
			_getEmployeeByUsername.setString(1, username);
			rs = _getEmployeeByUsername.executeQuery();
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Employee(rs.getInt(1), rs.getString(2), rs.getString(3), 
						rs.getString(4), rs.getString(5), rs.getString(6),
						new EmployeeType(rs.getInt(7),rs.getString(10)), rs.getString(8));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}		
	}

	public ArrayList<Employee> getEmployees() {
		try {
			ArrayList<Employee> res = null;
			ResultSet rs = null;
			rs = _getEmployees.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Employee>();
				while (rs.next()) {
					res.add(new Employee(rs.getInt(1), rs.getString(2),
							rs.getString(3), rs.getString(4), rs.getString(5), 
							rs.getString(6), new EmployeeType(rs.getInt(7),
							rs.getString(10)), rs.getString(8)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<Employee> getEmployees(String pos) {
		try {
			ArrayList<Employee> res = null;
			ResultSet rs = null;
			_getEmployeeByPosition.setString(1, pos);
			rs = _getEmployeeByPosition.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Employee>();
				while (rs.next()) {
					res.add(new Employee(rs.getInt(1), rs.getString(2),
							rs.getString(3), rs.getString(4), rs.getString(5), 
							rs.getString(6), new EmployeeType(rs.getInt(7),
							rs.getString(10)), rs.getString(8)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<EmployeeType> getEmployeeTypes() {
		try {
			ArrayList<EmployeeType> res = null;
			ResultSet rs = null;
			rs = _getEmployeeTypes.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<EmployeeType>();
				while (rs.next()) {
					res.add(new EmployeeType(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}				
	}
	
	public EmployeeType getEmployeeType(int id) {
		try {
			EmployeeType res = null;
			ResultSet rs = null;
			_getEmployeeType.setInt(1, id);
			rs = _getEmployeeType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new EmployeeType(rs.getInt("id"), rs.getString("name"));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("getEmployeeType: " + e.getMessage());
			return null;
		}				
	}
	
	// Locations
	public ArrayList<Location> getLocations() {
		try {
			ArrayList<Location> res = null;
			ResultSet rs = null;
			rs = _getLocations.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Location>();
				while (rs.next()) {
					res.add(new Location(rs.getInt(1), rs.getInt(2),
							rs.getInt(3), rs.getString(4)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}
	
	public Location getLocation(int id) {
		try {
			Location res = null;
			ResultSet rs = null;
			_getLocationById.setInt(1, id);
			rs = _getLocationById.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Location(rs.getInt("id"), rs.getInt("xcoord"),
						rs.getInt("ycoord"),rs.getString("name"));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("getEmployeeType: " + e.getMessage());
			return null;
		}				
	}
	
	// Images
	public SGIImage getImage(int id) {
		try {
			SGIImage res = null;
			ResultSet rs = null;
			_getImage.setInt(1, id);
			rs = _getImage.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new SGIImage(rs.getInt("id"),
						getLocation(rs.getInt("location")), 
						sqlDateTimeToJavaDate(rs.getString("timedate")),
						"images\\" + rs.getInt("id") + ".jpg"
						);
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<SGIImage> getImages() {
		try {
			ArrayList<SGIImage> res = null;
			ResultSet rs = null;
			rs = _getImages.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<SGIImage>();
				while (rs.next()) {
					res.add(
						new SGIImage(rs.getInt("id"),
								getLocation(rs.getInt("location")), 
								sqlDateTimeToJavaDate(rs.getString("timedate")),
								"images\\" + rs.getInt("id") + ".jpg"
								)
						);
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<SGIImage> getImages(String loc, Date dt) {
		try {
			ArrayList<SGIImage> res = null;
			ResultSet rs = null;
			_searchImages.setString(1, loc);
			_searchImages.setString(2, javaDateToSqlDateTime(dt));
			rs = _searchImages.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<SGIImage>();
				while (rs.next()) {
					res.add(
						new SGIImage(rs.getInt("id"),
								getLocation(rs.getInt("location")), 
								sqlDateTimeToJavaDate(rs.getString("timedate")),
								"images\\" + rs.getInt("id") + ".jpg"
								)
						);
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public boolean addImage(SGIImage img) {
		return true;
	}
	
	// Layers
	public ArrayList<LayerType> getLayerTypes() {
		try {
			ArrayList<LayerType> res = null;
			ResultSet rs = null;
			rs = _getLayerTypes.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<LayerType>();
				while (rs.next()) {
					res.add(new LayerType(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
	}
	
	public LayerType getLayerType(int id) {
		try {
			LayerType res = null;
			ResultSet rs = null;
			_getLayerType.setInt(1, id);
			rs = _getLayerType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new LayerType(rs.getInt(1), rs.getString(2));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("LayerType: " + e.getMessage());
			return null;
		}				
	}
	
	public Layer getLayer(int id) {
		try {
			Layer res = null;
			ResultSet rs = null;
			_getLayer.setInt(1, id);
			rs = _getLayer.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Layer(rs.getInt("id"), rs.getInt("image_id"), 
						getLayerType(rs.getInt("l_type")),
						"layers\\" + rs.getInt("id") + ".png");
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("LayerType: " + e.getMessage());
			return null;
		}				
	}

	public ArrayList<Layer> getLayers() {
		try {
			ArrayList<Layer> res = null;
			ResultSet rs = null;
			rs = _getLayers.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Layer>();
				while (rs.next()) {
					res.add(
						new Layer(rs.getInt("id"), rs.getInt("image_id"), 
								getLayerType(rs.getInt("l_type")),
								"layers\\" + rs.getInt("id") + ".png"));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("GetLayers: " + e.getMessage());
			return null;
		}						
		
	}

	public ArrayList<Layer> getImageLayers(int imageid) {
		try {
			ArrayList<Layer> res = null;
			ResultSet rs = null;
			_getImageLayers.setInt(1, imageid);
			rs = _getImageLayers.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Layer>();
				while (rs.next()) {
					res.add(
						new Layer(rs.getInt("id"), rs.getInt("image_id"), 
								getLayerType(rs.getInt("l_type")),
								"layers\\" + rs.getInt("id") + ".png"));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
		
	}
	
	public ArrayList<Layer> getLayersByType(int layertype) {
		try {
			ArrayList<Layer> res = null;
			ResultSet rs = null;
			_getLayersByType.setInt(1, layertype);
			rs = _getLayersByType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Layer>();
				while (rs.next()) {
					res.add(
						new Layer(rs.getInt("id"), rs.getInt("image_id"), 
								getLayerType(rs.getInt("l_type")),
								"layers\\" + rs.getInt("id") + ".png"));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
		
	}
	
	// Complaints
	public ArrayList<Complaint> getComplaints() {
		try {
			ArrayList<Complaint> res = null;
			ResultSet rs = null;
			rs = _getComplaints.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Complaint>();
				while (rs.next()) {
					System.out.println(rs.getInt(4));
					res.add(
						new Complaint(rs.getInt(1),
								(rs.getInt(2)!=0 ? getEmployee(rs.getInt(2)) : null),
								(rs.getInt(3)!=0 ? getClient(rs.getInt(3)) : null),
								getComplaintType(rs.getInt(4)),
								rs.getString(5),rs.getString(6),rs.getString(7),
								rs.getFloat(8),
								sqlDateTimeToJavaDate(rs.getString(9)),
								sqlDateTimeToJavaDate(rs.getString(10))));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<Complaint> getUnrepliedComplaints() {
		try {
			ArrayList<Complaint> res = null;
			ResultSet rs = null;
			rs = _getUnrepliedComplaints.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Complaint>();
				while (rs.next()) {
					System.out.println(rs.getInt(4));
					res.add(
						new Complaint(rs.getInt(1),
								(rs.getInt(2)!=0 ? getEmployee(rs.getInt(2)) : null),
								(rs.getInt(3)!=0 ? getClient(rs.getInt(3)) : null),
								getComplaintType(rs.getInt(4)),
								rs.getString(5),rs.getString(6),rs.getString(7),
								rs.getFloat(8),
								sqlDateTimeToJavaDate(rs.getString(9)),
								sqlDateTimeToJavaDate(rs.getString(10))));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	public ArrayList<Complaint> getUnseenComplaints() {
		try {
			ArrayList<Complaint> res = null;
			ResultSet rs = null;
			rs = _getUnseenComplaints.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Complaint>();
				while (rs.next()) {
					System.out.println(rs.getInt(4));
					res.add(
						new Complaint(rs.getInt(1),
								(rs.getInt(2)!=0 ? getEmployee(rs.getInt(2)) : null),
								(rs.getInt(3)!=0 ? getClient(rs.getInt(3)) : null),
								getComplaintType(rs.getInt(4)),
								rs.getString(5),rs.getString(6),rs.getString(7),
								rs.getFloat(8),
								sqlDateTimeToJavaDate(rs.getString(9)),
								sqlDateTimeToJavaDate(rs.getString(10))));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}
	}

	/**
	 * Get all complaints that are not addressed (replied) within a threshold
	 * from the deadline of address in days.
	 * For example: For a deadline of 2 days to address to a complaint,
	 * and wanting to get all complaints that are within an hour from
	 * the end of the deadline, enter days=2, threshold = 60
	 * @param days
	 * @param threshold
	 * @return An ArrayList of complaints
	 */
	public ArrayList<Complaint> getNearDeadlineComplaints(int days, int threshold) {
		try {
			ArrayList<Complaint> res = null;
			ResultSet rs = null;
			_getNearDeadlineComplaints.setInt(1, days);
			_getNearDeadlineComplaints.setInt(2, threshold);
			rs = _getNearDeadlineComplaints.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<Complaint>();
				while (rs.next()) {
					res.add(
						new Complaint(rs.getInt("id"),
								(rs.getInt("employee_id")!=0 ? getEmployee(rs.getInt("employee_id")) : null),
								(rs.getInt("client_id")!=0 ? getClient(rs.getInt("client_id")) : null),
								getComplaintType(rs.getInt("c_type")),
								rs.getString("title"),rs.getString("content"),rs.getString("reply"),
								rs.getFloat("compensation"),
								sqlDateTimeToJavaDate(rs.getString("send_timedate")),
								sqlDateTimeToJavaDate(rs.getString("reply_timedate"))));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("getNearDeadlineComplaints: " + e.getMessage());
			return null;
		}
	}

	public ArrayList<ComplaintType> getComplaintTypes() {
		try {
			ArrayList<ComplaintType> res = null;
			ResultSet rs = null;
			rs = _getComplaintTypes.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<ComplaintType>();
				while (rs.next()) {
					res.add(new ComplaintType(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}		
	}
	
	public ComplaintType getComplaintType(int id) {
		try {
			ComplaintType res = null;
			ResultSet rs = null;
			_getComplaintType.setInt(1, id);
			rs = _getComplaintType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new ComplaintType(rs.getInt("id"), rs.getString("name"));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println("GetComplaint Type: " + e.getMessage());
			return null;
		}		
	}
	
	// Prices
	public ArrayList<PriceType> getPriceTypes() {
		try {
			ArrayList<PriceType> res = null;
			ResultSet rs = null;
			rs = _getPriceTypes.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<PriceType>();
				while (rs.next()) {
					res.add(new PriceType(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}				
	}
	
	public PriceType getPriceType(int id) {
		try {
			PriceType res = null;
			ResultSet rs = null;
			_getPriceType.setInt(1, id);
			rs = _getPriceType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new PriceType(rs.getInt(1), rs.getString(2));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}				
	}

	// Subscriptions
	public ArrayList<SubscriptionType> getSubscriptionTypes() {
		try {
			ArrayList<SubscriptionType> res = null;
			ResultSet rs = null;
			rs = _getSubscriptionTypes.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<SubscriptionType>();
				while (rs.next()) {
					res.add(new SubscriptionType(rs.getInt(1), rs.getString(2)));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
	}
	
	public SubscriptionType getSubscriptionType(int id) {
		try {
			SubscriptionType res = null;
			ResultSet rs = null;
			_getSubscriptionType.setInt(1, id);
			rs = _getSubscriptionType.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new SubscriptionType(rs.getInt(1), rs.getString(2));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}				
	}

	public Subscription getSubscription(int id) {
		try {
			Subscription res = null;
			ResultSet rs = null;
			_getSubscription.setInt(1, id);
			rs = _getSubscription.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				rs.next();
				res = new Subscription(rs.getInt(1), getSubscriptionType(rs.getInt(2)),
						getLayerType(rs.getInt(3)),rs.getInt(4));
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
	}
	
	public ArrayList<SubscriptionPurchase> getClientSubscriptions(int cid) {
		try {
			ArrayList<SubscriptionPurchase> res = null;
			ResultSet rs = null;
			_getClientSubscriptions.setInt(1, cid);
			rs = _getClientSubscriptions.executeQuery();				
			if (getResultSetCount(rs) > 0) {
				res = new ArrayList<SubscriptionPurchase>();
				while (rs.next()) {
					res.add(new SubscriptionPurchase(getSubscription(rs.getInt("subscription_id")),
							getClient(rs.getInt("client_id")), this.sqlDateTimeToJavaDate(rs.getString("timedate")),
							rs.getInt("used_images"),rs.getFloat("price")));
				}
			}
			return res;
		} catch (SQLException e) {
			// Handle exception
			System.out.println(e.getMessage());
			return null;
		}						
	}
	
}
